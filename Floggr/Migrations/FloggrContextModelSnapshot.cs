// <auto-generated />
using System;
using Floggr.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Floggr.Migrations
{
    [DbContext(typeof(FloggrContext))]
    partial class FloggrContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RootFoundationFoods.FoodCategory", b =>
                {
                    b.Property<int>("foodCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("foodCategoryID"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodCategoryID");

                    b.ToTable("FoodCategories", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.FoodNutrient", b =>
                {
                    b.Property<int>("foodNutrientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("foodNutrientID"));

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<int>("dataPoints")
                        .HasColumnType("int");

                    b.Property<int?>("foodNutrientDerivationID")
                        .HasColumnType("int");

                    b.Property<int?>("foundationFoodID")
                        .HasColumnType("int");

                    b.Property<double?>("max")
                        .HasColumnType("float");

                    b.Property<double>("median")
                        .HasColumnType("float");

                    b.Property<double?>("min")
                        .HasColumnType("float");

                    b.Property<int?>("nutrientID")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodNutrientID");

                    b.HasIndex("foodNutrientDerivationID");

                    b.HasIndex("foundationFoodID");

                    b.HasIndex("nutrientID");

                    b.ToTable("FoodNutrients", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.FoodNutrientDerivation", b =>
                {
                    b.Property<int>("foodNutrientDerivationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("foodNutrientDerivationID"));

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("foodNutrientSourceID")
                        .HasColumnType("int");

                    b.HasKey("foodNutrientDerivationID");

                    b.HasIndex("foodNutrientSourceID");

                    b.ToTable("FoodNutrientDerivations", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.FoodNutrientSource", b =>
                {
                    b.Property<int>("foodNutrientSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("foodNutrientSourceID"));

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodNutrientSourceID");

                    b.ToTable("FoodNutrientSource", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.FoodPortion", b =>
                {
                    b.Property<int>("foodPortionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("foodPortionID"));

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<int?>("foundationFoodID")
                        .HasColumnType("int");

                    b.Property<double>("gramWeight")
                        .HasColumnType("float");

                    b.Property<int?>("measureUnitID")
                        .HasColumnType("int");

                    b.Property<int>("minYearAcquired")
                        .HasColumnType("int");

                    b.Property<string>("modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sequenceNumber")
                        .HasColumnType("int");

                    b.Property<double>("value")
                        .HasColumnType("float");

                    b.HasKey("foodPortionID");

                    b.HasIndex("foundationFoodID");

                    b.HasIndex("measureUnitID");

                    b.ToTable("FoodPortions", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.FoundationFood", b =>
                {
                    b.Property<int>("foundationFoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("foundationFoodID"));

                    b.Property<string>("dataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fdcId")
                        .HasColumnType("int");

                    b.Property<int>("foodCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("foodClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isHistoricalReference")
                        .HasColumnType("bit");

                    b.Property<int?>("ndbNumber")
                        .HasColumnType("int");

                    b.Property<string>("publicationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("rootID")
                        .HasColumnType("int");

                    b.Property<string>("scientificName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foundationFoodID");

                    b.HasIndex("foodCategoryID");

                    b.HasIndex("rootID");

                    b.ToTable("FoundationFoods", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.InputFood", b =>
                {
                    b.Property<int>("inputFoodsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("inputFoodsID"));

                    b.Property<string>("foodDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("foundationFoodID")
                        .HasColumnType("int");

                    b.Property<int?>("inputFoods2ID")
                        .HasColumnType("int");

                    b.HasKey("inputFoodsID");

                    b.HasIndex("foundationFoodID");

                    b.HasIndex("inputFoods2ID");

                    b.ToTable("InputFoods", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.InputFood2", b =>
                {
                    b.Property<int>("inputFoods2ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("inputFoods2ID"));

                    b.Property<string>("dataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("fdcId")
                        .HasColumnType("int");

                    b.Property<int?>("foodCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("foodClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publicationDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("inputFoods2ID");

                    b.HasIndex("foodCategoryID");

                    b.ToTable("InputFoods2", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.MeasureUnit", b =>
                {
                    b.Property<int>("measureUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("measureUnitID"));

                    b.Property<string>("abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("measureUnitID");

                    b.ToTable("MeasureUnits", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.Nutrient", b =>
                {
                    b.Property<int>("nutrientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nutrientID"));

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rank")
                        .HasColumnType("int");

                    b.Property<string>("unitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nutrientID");

                    b.ToTable("Nutrients", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.NutrientConversionFactor", b =>
                {
                    b.Property<int>("nutrientConversionFactorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nutrientConversionFactorID"));

                    b.Property<double>("carbohydrateValue")
                        .HasColumnType("float");

                    b.Property<double>("fatValue")
                        .HasColumnType("float");

                    b.Property<int?>("foundationFoodID")
                        .HasColumnType("int");

                    b.Property<double>("proteinValue")
                        .HasColumnType("float");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("value")
                        .HasColumnType("float");

                    b.HasKey("nutrientConversionFactorID");

                    b.HasIndex("foundationFoodID");

                    b.ToTable("NutrientConversionFactors", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.Root", b =>
                {
                    b.Property<int>("rootID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rootID"));

                    b.HasKey("rootID");

                    b.ToTable("RootFoundationFoods", (string)null);
                });

            modelBuilder.Entity("RootFoundationFoods.FoodNutrient", b =>
                {
                    b.HasOne("RootFoundationFoods.FoodNutrientDerivation", "foodNutrientDerivation")
                        .WithMany()
                        .HasForeignKey("foodNutrientDerivationID");

                    b.HasOne("RootFoundationFoods.FoundationFood", null)
                        .WithMany("foodNutrients")
                        .HasForeignKey("foundationFoodID");

                    b.HasOne("RootFoundationFoods.Nutrient", "nutrient")
                        .WithMany()
                        .HasForeignKey("nutrientID");

                    b.Navigation("foodNutrientDerivation");

                    b.Navigation("nutrient");
                });

            modelBuilder.Entity("RootFoundationFoods.FoodNutrientDerivation", b =>
                {
                    b.HasOne("RootFoundationFoods.FoodNutrientSource", "foodNutrientSource")
                        .WithMany()
                        .HasForeignKey("foodNutrientSourceID");

                    b.Navigation("foodNutrientSource");
                });

            modelBuilder.Entity("RootFoundationFoods.FoodPortion", b =>
                {
                    b.HasOne("RootFoundationFoods.FoundationFood", null)
                        .WithMany("foodPortions")
                        .HasForeignKey("foundationFoodID");

                    b.HasOne("RootFoundationFoods.MeasureUnit", "measureUnit")
                        .WithMany()
                        .HasForeignKey("measureUnitID");

                    b.Navigation("measureUnit");
                });

            modelBuilder.Entity("RootFoundationFoods.FoundationFood", b =>
                {
                    b.HasOne("RootFoundationFoods.FoodCategory", "foodCategory")
                        .WithMany()
                        .HasForeignKey("foodCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RootFoundationFoods.Root", null)
                        .WithMany("FoundationFoods")
                        .HasForeignKey("rootID");

                    b.Navigation("foodCategory");
                });

            modelBuilder.Entity("RootFoundationFoods.InputFood", b =>
                {
                    b.HasOne("RootFoundationFoods.FoundationFood", null)
                        .WithMany("inputFoods")
                        .HasForeignKey("foundationFoodID");

                    b.HasOne("RootFoundationFoods.InputFood2", "inputFood")
                        .WithMany()
                        .HasForeignKey("inputFoods2ID");

                    b.Navigation("inputFood");
                });

            modelBuilder.Entity("RootFoundationFoods.InputFood2", b =>
                {
                    b.HasOne("RootFoundationFoods.FoodCategory", "foodCategory")
                        .WithMany()
                        .HasForeignKey("foodCategoryID");

                    b.Navigation("foodCategory");
                });

            modelBuilder.Entity("RootFoundationFoods.NutrientConversionFactor", b =>
                {
                    b.HasOne("RootFoundationFoods.FoundationFood", null)
                        .WithMany("nutrientConversionFactors")
                        .HasForeignKey("foundationFoodID");
                });

            modelBuilder.Entity("RootFoundationFoods.FoundationFood", b =>
                {
                    b.Navigation("foodNutrients");

                    b.Navigation("foodPortions");

                    b.Navigation("inputFoods");

                    b.Navigation("nutrientConversionFactors");
                });

            modelBuilder.Entity("RootFoundationFoods.Root", b =>
                {
                    b.Navigation("FoundationFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
